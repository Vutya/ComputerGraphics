function init() {
    console.info("page loaded");
    /*
    Первая переменная ссылается на элемент canvas на html,
    вторая переменная получает “контекст” для рисования.
    Именно с помощью переменной ctx мы будем рисовать.
     */
    var canvas = document.getElementById("game");
    var ctx = canvas.getContext('2d');
    /*
    Рисование на canvas: всё нарисованное остается на canvas навсегда,
    и если вы хотите что-то исправить, нужно нарисовать поверх.
    Еще есть возможность удалять прямоугольники.

    Рисовать можно прямоугольнки и “пути”, пути могут иметь произвольную форму,
     т.е. если нужен круг, треугольник, то рисуйте его с помощью пути. Path.
     */
    ctx.fillStyle ='tomato';   //цвета как в CSS. Можно #FF0000
    //Или можно “rgb(255, 0, 0)”,
    //Или “rgba(rgba(255, 0, 0, 0.5)”

    ctx.fillRect(0, 0, 100, 100); // координаты левого верхнего угла, высота и ширина
    ctx.strokeStyle = "blue";
    ctx.strokeRect(10.5, 10.5, 100, 100); // прямоугольник по границе
    /*
    Почему толщина 2 пикселя?
    Закращиваются по половне пикселя на решётке, визуально должно казаться, что пиксель один.
    */
    // Координаты слева сверху
    ctx.clearRect(0, 0, 640, 480); //очистить прямоугольник.
    /*
    Рисование путей
    Сначала нужно обозначить путь, т.е. нарисовать его неявно, как будто карандашом.
    А потом нужно дать команду “обвести” путь или “закрасить” путь.
    Т.е. можно, например, нарисовать треугольник, а потом дать команду его обвести,ss
    тогда появится граница треугольника. А если дать команду “закрасить”, то появится
    и внутренность треугольника. Можно дать обе команды.
     */
    ctx.beginPath(); //обязательная команда, она говорит, что надо начать новый путь. Без нее вы продолжите старый путь
    // и будете удивляться тому, что нарисовалось.
    ctx.moveTo(120, 120); // переместить карандаш в точку
    ctx.lineTo(200, 140); // провести линию в какую-то точку из данной
    ctx.lineTo(140, 200); //опять провести карандаш
    ctx.closePath(); //провести карандаш в начало путь. Это можно не делать.
    ctx.fill();
    ctx.stroke();

    //теперь давайте нарисуем хитрую форму
    ctx.beginPath();
    ctx.arc(200, 200, 50, 0, Math.PI * 1.2);
    ctx.lineTo(200, 220);
    ctx.bezierCurveTo(210, 210, 240, 240, 250, 270);
    ctx.stroke();

    ctx.beginPath();
    ctx.moveTo(75,25);
    ctx.quadraticCurveTo(25,25,25,62.5);
    ctx.quadraticCurveTo(25,100,50,100);
    ctx.quadraticCurveTo(50,120,30,125);
    ctx.quadraticCurveTo(60,120,65,100);
    ctx.quadraticCurveTo(125,100,125,62.5);
    ctx.quadraticCurveTo(125,25,75,25);
    ctx.stroke();

    for(var i=0; i < 255; i++) {
        ctx.fillStyle = "rgb(" + i + "," + i + "," + i +")";
        ctx.fillRect(30 + i * 2, 350, 4, 80);
        ctx.strokeStyle = "rgb(" + i + "," + i + "," + i +")";
        ctx.strokeRect(30 + i * 2, 350, 4, 80);
        console.log(i);
    }

    ctx.strokeStyle = "black";
    ctx.beginPath();
    ctx.arc(530, 150, 51, 0, Math.PI * 2);
    ctx.stroke();
    ctx.closePath();

    for(var i=0; i < 51; i++) {
        ctx.beginPath();
        ctx.arc(530, 150, 51 - i, 0, Math.PI * 2);
        ctx.fillStyle = "rgb(" + i*5 + "," + i*5 + "," + i*5 +")";
        ctx.fill();
        ctx.closePath();
    }

    /*
    Простейшая анимация
    Функции задержки выполнения
    setInterval(действие, через сколько миллисекунд);
    setTimeout(действие, через сколько миллисекунд);

    setTimeout выполнит действие один раз, а setInterval будет повторять действие с указанной периодичностью.

    Как остановить действие
    var id1 = setTimeout(действие, мс)
    var id2 = setInterval(действие, мс)

    clearTimeout(id1)
    clearInterval(id2)

    если останавливать не нужно, то и переменные id1, id2 тоже не нужны.

    Ну а действие - это функция

    setInterval(function() {console.log(‘hello’);}, 1000)

    Простейшая анимация устроена так:

    function draw() {
	    //при необходимости очистить canvas через clearRect()
	    //рисуем новый кадр
    }

    setInterval(draw, 1000 / 60); // устанавливаем повторение действия на 60 раз в секунду

    Нарисуйте в draw какой-нибудь объект. Например, треугольник. Чтобы он двигался, нужно каждый раз рисовать его в
    новых координатах. Для этого нужно в методе draw изменять координату прямоугольника.
    Координата - это внешняя переменная для метода draw.
     */

    var x = 20;
    function draw() {
        ctx.clearRect(120 + x, 119, 80, 80);
        for(var i=0; i < 51; i++) {
            ctx.beginPath();
            ctx.arc(530, 150, 51 - i, 0, Math.PI * 2);
            ctx.fillStyle = "rgb(" + i*5 + "," + i*5 + "," + i*5 +")";
            ctx.fill();
            ctx.closePath();
        }
        ctx.fillStyle = "tomato";
        ctx.beginPath();
        ctx.moveTo(120 + x, 120);
        ctx.lineTo(200 + x, 140);
        ctx.lineTo(140 + x, 200);
        ctx.closePath();
        ctx.fill();
        x += 0.5;
    }
    setInterval(draw, 1000 / 60);
}